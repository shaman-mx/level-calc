/* =========================================================
   TU TI√äN WEPLAY ‚Äì Script h·ª£p nh·∫•t cho to√†n b·ªô website
   - M√°y t√≠nh tr∆∞·ªõc/sau Lv15 (index)
   - M√¥ ph·ªèng tinh th·ªÉ tu vi (crystal)
   - B·∫£ng EXP / C√¢u h·ªèi: sinh ƒëi·ªÅu h∆∞·ªõng
   - ƒê·ªìng b·ªô Dark/Light theme
   ========================================================= */
(function () {
  "use strict";

  /* -------------------- Helpers chung -------------------- */
  const $ = (sel, root = document) => root.querySelector(sel);
  const $$ = (sel, root = document) => Array.from(root.querySelectorAll(sel));
  const rootEl = document.documentElement;
  const themeToggleBtn = $("#themeToggle");

  function setTheme(theme) {
    rootEl.setAttribute("data-theme", theme);
    localStorage.setItem("theme", theme);
    if (themeToggleBtn) themeToggleBtn.textContent = theme === "dark" ? "‚òÄÔ∏è" : "üåô";
    // tr√°nh nh√°y nh·ªè
    document.body.style.visibility = "hidden";
    void document.body.offsetHeight;
    document.body.style.visibility = "visible";
  }
  // Kh·ªüi t·∫°o theme ngay
  (function initTheme() {
    const saved = localStorage.getItem("theme");
    const prefersDark = window.matchMedia("(prefers-color-scheme: dark)").matches;
    setTheme(saved || (prefersDark ? "dark" : "light"));
    if (themeToggleBtn) {
      themeToggleBtn.addEventListener("click", () => {
        const cur = rootEl.getAttribute("data-theme");
        setTheme(cur === "dark" ? "light" : "dark");
      });
    }
  })();

  /* ---------------- M√°y t√≠nh tr∆∞·ªõc/sau Lv15 (index) ---------------- */
  (function setupIndexCalc() {
    const beforeInput = $("#beforeInput");
    const afterInput = $("#afterInput");
    const beforeOut = $("#beforeResult");
    const afterOut = $("#afterResult");
    const clearBefore = $("#clearBefore");
    const clearAfter = $("#clearAfter");

    if (!beforeInput && !afterInput) return; // kh√¥ng ·ªü trang index

    const format = (num) => (Number.isFinite(num) ? num.toFixed(2) : "0.00");
    const safeEval = (expr) => {
      if (!/^[0-9+\-*/().\s]+$/.test(expr)) return NaN;
      try {
        // eslint-disable-next-line no-new-func
        return new Function(`return (${expr})`)();
      } catch {
        return NaN;
      }
    };

    function calcBefore() {
      const expr = beforeInput.value.replace(",", ".");
      const val = safeEval(expr);
      const res = (val * 105) / 95;
      if (beforeOut) beforeOut.textContent = format(res);
    }
    function calcAfter() {
      const expr = afterInput.value.replace(",", ".");
      const val = safeEval(expr);
      const res = (val * 110) / 95;
      if (afterOut) afterOut.textContent = format(res);
    }

    if (beforeInput && beforeOut) beforeInput.addEventListener("input", calcBefore);
    if (afterInput && afterOut) afterInput.addEventListener("input", calcAfter);

    if (clearBefore && beforeInput) {
      clearBefore.addEventListener("click", () => {
        beforeInput.value = "";
        calcBefore();
        beforeInput.focus();
      });
    }
    if (clearAfter && afterInput) {
      clearAfter.addEventListener("click", () => {
        afterInput.value = "";
        calcAfter();
        afterInput.focus();
      });
    }

    window.addEventListener("DOMContentLoaded", () => {
      if (beforeInput && beforeOut) calcBefore();
      if (afterInput && afterOut) calcAfter();
    });
  })();

  /* -------------------- M√¥ ph·ªèng tinh th·ªÉ (crystal) -------------------- */
  (function setupCrystal() {
    // Ph·∫ßn t·ª≠ b·∫Øt bu·ªôc c·ªßa trang crystal
    const levelSelect = $("#levelSelect");
    const cbSuoiLinh = $("#suoiLinh");
    const selThanMat = $("#thanMat");
    const selChienDau = $("#chienDau");
    const selKeBangTam = $("#keBangTam");

    const outCapacity = $("#expCapacity");
    const outBase = $("#baseSpeed");
    const outCurrent = $("#currentSpeed");
    const outTimeReq = $("#timeRequired");
    const outTimeRemain = $("#timeRemaining");

    const progressBar = $("#progressBar");
    const progressText = $("#progressText");
    const resetBtn = $("#resetBtn");

    // Kh√¥ng ·ªü trang crystal
    if (!levelSelect || !progressBar || !progressText) return;

    // D·ªØ li·ªáu dung l∆∞·ª£ng tinh th·ªÉ ƒë√£ x√°c nh·∫≠n
    const CAPACITY = {
      "1-s∆°": 6,
      "1-trung": 8,
      "1-h·∫≠u": 18,
      "2-s∆°": 38,
      "2-trung": 160,
      "2-h·∫≠u": 320,
      "3-s∆°": 1938,
      "3-trung": 5000,
      "3-h·∫≠u": 8740,
      "4-s∆°": 9100,
      "4-trung": 9690,
      "4-h·∫≠u": 16150,
      "5-s∆°": 17670,
      "5-trung": 18544,
      "5-h·∫≠u": 19874,
      "6-s∆°": 20444,
      "6-trung": 21470,
      "6-h·∫≠u": 22420,
      "7-s∆°": 23674
      "7-trung": 24852
      "7-h·∫≠u": 26106
      "8-s∆°": 27398
      // s·∫Ω b·ªï sung th√™m khi c√≥ s·ªë li·ªáu
    };

    // T·ªëc ƒë·ªô g·ªëc theo Level
    function baseSpeedByLevel(levelNum) {
      const n = Number(levelNum);
      if (n <= 0) return 0;
      if (n === 1) return 1;
      if (n === 2) return 1;
      if (n === 3) return 3;
      if (n === 4) return 5;
      if (n >= 5 && n <= 7) return 5;
      if (n >= 8 && n <= 11) return 10;
      if (n >= 12 && n <= 15) return 30;
      if (n === 16 || n === 17) return 50;
      if (n === 18) return 100;
      return 0;
    }

    // Map tinh th·∫ßn chi·∫øn ƒë·∫•u -> % tƒÉng t·ªëc (tr√™n t·ªëc ƒë·ªô g·ªëc)
    function chienDauPercent(val) {
      const v = Number(val);
      if (v >= 1501) return 15;
      if (v >= 1001) return 7;
      if (v >= 501) return 5;
      if (v >= 200) return 3;
      return 0;
    }

    // Map K·∫ø bƒÉng t√¢m -> +EXP/s
    function keBangTamFlat(val) {
      const v = Number(val);
      if (v >= 5) return 3;
      if (v >= 3) return 2;
      if (v >= 1) return 1;
      return 0;
    }

    // State m√¥ ph·ªèng
    const state = {
      levelKey: "", // "4-trung" ...
      capacity: 0,
      levelNum: 0,
      baseSpeed: 0, // EXP/s
      // ch·∫°y li√™n t·ª•c
      startTime: performance.now(), // ms
      startExp: 0, // EXP t·∫°i startTime
      currentSpeed: 0, // EXP/s (ƒë√£ t√≠nh buff)
      finished: false
    };

    function parseLevelKey(key) {
      // "4-trung" -> { num:4, phase:"trung" }
      const [numStr] = key.split("-");
      return { num: Number(numStr) || 0 };
    }

    // T√≠nh t·ªëc ƒë·ªô hi·ªán t·∫°i v·ªõi buff, KH√îNG reset progress
    function recalcSpeedKeepProgress() {
      // ƒêang ·ªü gi·ªØa -> ghi nh·∫≠n EXP hi·ªán t·∫°i r·ªìi set l·∫°i m·ªëc m·ªõi
      const now = performance.now();
      const expNow = getCurrentExp(now);
      state.startExp = expNow;
      state.startTime = now;

      const base = state.baseSpeed; // t·ªëc ƒë·ªô g·ªëc theo level
      let percent = 0;
      if (cbSuoiLinh && cbSuoiLinh.checked) percent += 10;
      if (selThanMat) {
        const tm = Number(selThanMat.value || 0);
        percent += tm * 5; // 1,2,3 ng∆∞·ªùi -> +5/10/15%
      }
      if (selChienDau) percent += chienDauPercent(selChienDau.value);

      const flat = selKeBangTam ? keBangTamFlat(selKeBangTam.value) : 0;

      // % ch·ªâ c·ªông tr√™n t·ªëc ƒë·ªô g·ªëc, sau c√πng c·ªông th√™m flat
      const speed = base * (1 + percent / 100) + flat;
      state.currentSpeed = Math.max(0, speed);

      // c·∫≠p nh·∫≠t hi·ªÉn th·ªã
      if (outBase) outBase.textContent = base.toFixed(2);
      if (outCurrent) outCurrent.textContent = state.currentSpeed.toFixed(2);

      // th·ªùi gian l√Ω thuy·∫øt t·ª´ 0% v·ªõi t·ªëc ƒë·ªô hi·ªán t·∫°i
      if (outTimeReq) {
        const t = state.currentSpeed > 0 ? state.capacity / state.currentSpeed : Infinity;
        outTimeReq.textContent = formatDuration(t);
      }
    }

    // Reset khi ƒë·ªïi Level/Giai ƒëo·∫°n ho·∫∑c b·∫•m Reset
    function resetCrystal(fromLevelChange = false) {
      // ƒë·ªïi level -> c·∫≠p nh·∫≠t capacity, base
      if (fromLevelChange) {
        const key = levelSelect.value;
        state.levelKey = key || "";
        const { num } = parseLevelKey(state.levelKey);
        state.levelNum = num;
        state.capacity = CAPACITY[state.levelKey] || 0;
        state.baseSpeed = baseSpeedByLevel(num);
        state.finished = false;

        // th√¥ng tin c∆° b·∫£n
        if (outCapacity) outCapacity.textContent = state.capacity.toLocaleString("vi-VN");
        if (outBase) outBase.textContent = state.baseSpeed.toFixed(2);
      }

      // reset ti·∫øn tr√¨nh
      state.startExp = 0;
      state.startTime = performance.now();
      state.finished = false;

      // t√≠nh l·∫°i t·ªëc ƒë·ªô v·ªõi buff hi·ªán t·∫°i
      recalcSpeedKeepProgress();
      // √©p v·∫Ω UI ngay
      drawProgress(performance.now());
    }

    // EXP t·∫°i th·ªùi ƒëi·ªÉm t (ms)
    function getCurrentExp(tms) {
      const elapsedSec = Math.max(0, (tms - state.startTime) / 1000);
      const exp = state.startExp + elapsedSec * state.currentSpeed;
      return Math.min(exp, state.capacity);
    }

    function formatDuration(totalSeconds) {
      if (!isFinite(totalSeconds)) return "‚Äî";
      const s = Math.max(0, Math.floor(totalSeconds));
      const h = Math.floor(s / 3600);
      const m = Math.floor((s % 3600) / 60);
      const sec = s % 60;
      return `${h} gi·ªù ${m} ph√∫t ${sec} gi√¢y`;
    }

    function drawProgress(now) {
      const exp = getCurrentExp(now);
      const ratio = state.capacity > 0 ? exp / state.capacity : 0;
      const pct = Math.max(0, Math.min(100, ratio * 100));

      if (progressBar) progressBar.style.width = `${pct}%`;
      if (progressText) progressText.textContent = `${pct.toFixed(1)}%`;

      // C√≤n l·∫°i
      const remainExp = Math.max(0, state.capacity - exp);
      const remainSec =
        state.currentSpeed > 0 ? remainExp / state.currentSpeed : Infinity;
      if (outTimeRemain) outTimeRemain.textContent = formatDuration(remainSec);

      // Th√¥ng b√°o khi ƒë·∫ßy (1 l·∫ßn)
      if (!state.finished && exp >= state.capacity && state.capacity > 0) {
        state.finished = true;
        try {
          // nh·∫π nh√†ng, tr√°nh spam
          alert("‚ú® Tinh th·ªÉ ƒë√£ ƒë·∫ßy!");
        } catch {}
      }
    }

    // V√≤ng l·∫∑p m∆∞·ª£t v·ªõi rAF
    (function tick() {
      const now = performance.now();
      drawProgress(now);
      requestAnimationFrame(tick);
    })();

    // Li√™n k·∫øt s·ª± ki·ªán
    levelSelect.addEventListener("change", () => resetCrystal(true));
    if (cbSuoiLinh) cbSuoiLinh.addEventListener("change", recalcSpeedKeepProgress);
    if (selThanMat) selThanMat.addEventListener("change", recalcSpeedKeepProgress);
    if (selChienDau) selChienDau.addEventListener("change", recalcSpeedKeepProgress);
    if (selKeBangTam) selKeBangTam.addEventListener("change", recalcSpeedKeepProgress);
    if (resetBtn) resetBtn.addEventListener("click", () => resetCrystal(false));

    // T·ª± ƒë·ªông ch·∫°y ngay v·ªõi l·ª±a ch·ªçn m·∫∑c ƒë·ªãnh
    resetCrystal(true);
  })();

  /* ----------------- B·∫£ng l·ª±a ch·ªçn (choices.html) ----------------- */
  (function renderChoicesIfAny() {
    const choicesBody = $("#choicesBody");
    if (!choicesBody) return;

    const choicesData = [
      { option1: { text: "ƒÇn qu·∫£", reward: "TƒÉng tu vi", danger: false },
        option2: { text: "U·ªëng n∆∞·ªõc t·ª´ su·ªëi", reward: "TƒÉng tu vi", danger: false }},

      { option1: { text: "B√≠ m·∫≠t ƒëi·ªÅu tra", reward: "Th∆∞ th√°ch ƒë·∫•u", danger: false },
        option2: { text: "T·∫•n c√¥ng tr·ª±c di·ªán", reward: "Kh√¥ng c√≥ g√¨", danger: true }},

      { option1: { text: "Chi·∫øn ƒë·∫•u", reward: "Th∆∞ th√°ch ƒë·∫•u", danger: false },
        option2: { text: "Ng∆∞·ª°ng m·ªô", reward: "TƒÉng tu vi", danger: false }},

      { option1: { text: "C√πng nhau kh√°m ph√°", reward: "Tr·ª´ tu vi", danger: true },
        option2: { text: "T·ª± kh√°m ph√°", reward: "ƒêan v√†ng", danger: false }},

      { option1: { text: "C·ª©u ch·ªØa", reward: "ƒêan xanh", danger: false },
        option2: { text: "R·ªùi ƒëi", reward: "Tr·ª´ tu vi", danger: true }},

      { option1: { text: "ƒê√° th·∫ßn", reward: "TƒÉng tu vi", danger: false },
        option2: { text: "ƒê√° hi·∫øm", reward: "TƒÉng tu vi", danger: false }},

      { option1: { text: "ƒê√°nh nhau v·ªõi ng∆∞·ªùi ƒë√≥", reward: "ƒêan xanh", danger: false },
        option2: { text: "Cho l·ªùi khuy√™n", reward: "TƒÉng tu vi", danger: false }},

      { option1: { text: "ƒêi ƒë·∫øn h·ªì ƒëen", reward: "Tr·ª´ tu vi", danger: true },
        option2: { text: "ƒêi ƒë·∫øn th√¥n hoa sen", reward: "ƒêan xanh", danger: false }},

      { option1: { text: "ƒêi sang tr√°i", reward: "Tr·ª´ tu vi", danger: true },
        option2: { text: "ƒêi sang ph·∫£i", reward: "Th∆∞ th√°ch ƒë·∫•u", danger: false }},

      { option1: { text: "ƒêi tr√™n thuy·ªÅn", reward: "ƒêan xanh", danger: false },
        option2: { text: "Bay tr√™n ki·∫øm", reward: "Th∆∞ th√°ch ƒë·∫•u", danger: false }},

      { option1: { text: "ƒêi v√†o ban ƒë√™m", reward: "ƒêan v√†ng", danger: false },
        option2: { text: "ƒêi v√†o ban ng√†y", reward: "Kh√¥ng c√≥ g√¨", danger: true }},

      { option1: { text: "ƒê·ªìng √Ω", reward: "TƒÉng tu vi", danger: false },
        option2: { text: "T·ª´ ch·ªëi", reward: "TƒÉng tu vi", danger: false }},

      { option1: { text: "D≈©ng c·∫£m d·ª±a v√†o", reward: "TƒÉng tu vi", danger: false },
        option2: { text: "ƒêi n·∫•p", reward: "Kh√¥ng c√≥ g√¨", danger: true }},

      { option1: { text: "Khai th√°c b·ªÅ m·∫∑t", reward: "TƒÉng tu vi", danger: false },
        option2: { text: "Khai th√°c s√¢u", reward: "Kh√¥ng c√≥ g√¨", danger: true }},

      { option1: { text: "L∆∞∆°ng thi·ªán", reward: "TƒÉng tu vi", danger: false },
        option2: { text: "L·ªõn m·∫°nh", reward: "ƒêan v√†ng", danger: false }},

      { option1: { text: "T·∫∑ng thu·ªëc", reward: "ƒêan xanh", danger: false },
        option2: { text: "C·ª©u ch·ªØa", reward: "ƒêan v√†ng", danger: false }},

      { option1: { text: "Ti√™n th·∫£o", reward: "TƒÉng tu vi", danger: false },
        option2: { text: "ƒêan d∆∞·ª£c", reward: "ƒêan xanh", danger: false }},

      { option1: { text: "Tr·ª£ gi√∫p chim loan", reward: "ƒêan xanh", danger: false },
        option2: { text: "Tr·ª£ gi√∫p chu·ªôt v√†ng", reward: "ƒêan v√†ng", danger: false }},

      { option1: { text: "T∆∞·ªõi v∆∞·ªùn thu·ªëc", reward: "TƒÉng tu vi", danger: false },
        option2: { text: "Luy·ªán ƒëan", reward: "ƒêan xanh", danger: false }},
    ];

    const frag = document.createDocumentFragment();
    choicesData.forEach((q) => {
      const tr = document.createElement("tr");
      const td1 = document.createElement("td");
      const td2 = document.createElement("td");

      td1.innerHTML = `
        <div class="choice ${q.option1.danger ? "danger" : ""}">
          <span>${q.option1.text}</span>
          <span class="reward">(${q.option1.reward})</span>
        </div>
      `;
      td2.innerHTML = `
        <div class="choice ${q.option2.danger ? "danger" : ""}">
          <span>${q.option2.text}</span>
          <span class="reward">(${q.option2.reward})</span>
        </div>
      `;
      tr.appendChild(td1);
      tr.appendChild(td2);
      frag.appendChild(tr);
    });
    choicesBody.appendChild(frag);
  })();

  /* --------------- ƒêi·ªÅu h∆∞·ªõng t·ª± ƒë·ªông (·∫©n trang hi·ªán t·∫°i) --------------- */
  (function addNavButtons() {
    const main = document.querySelector("main");
    if (!main) return;

    const current = (window.location.pathname.split("/").pop() || "index.html").toLowerCase();

    const wrapper = document.createElement("div");
    wrapper.className = "exp-link-wrapper";

    const allButtons = [
      { href: "index.html", label: "üè† Trang ch√≠nh", class: "exp-btn back" },
      { href: "exp.html", label: "üìÑ B·∫£ng EXP", class: "exp-btn" },
      { href: "choices.html", label: "‚ùì C√¢u h·ªèi", class: "exp-btn alt" },
      { href: "crystal.html", label: "üî∑ M√¥ ph·ªèng tinh th·ªÉ", class: "exp-btn" },
    ];

    allButtons
      .filter((b) => b.href.toLowerCase() !== current)
      .forEach((b) => {
        const a = document.createElement("a");
        a.href = b.href;
        a.textContent = b.label;
        a.className = b.class;
        wrapper.appendChild(a);
      });

    main.appendChild(wrapper);
  })();
})();
