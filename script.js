(function () {
  "use strict";

  const $ = (sel) => document.querySelector(sel);
  const root = document.documentElement;

  /** =============================
   *  PH·∫¶N 1 ‚Äî ƒê·ªäNH NGHƒ®A BI·∫æN CHUNG
   ============================== */
const sachHienNhan = $("#sachHienNhan");
const tamPhapAnhHung = $("#tamPhapAnhHung");
const banDoKhoBau = $("#banDoKhoBau");
const thanChuPhepThuat = $("#thanChuPhepThuat");
const kinhDaoGiao = $("#kinhDaoGiao");
  
  const beforeInput = $("#beforeInput");
  const afterInput = $("#afterInput");
  const beforeOut = $("#beforeResult");
  const afterOut = $("#afterResult");
  const clearBefore = $("#clearBefore");
  const clearAfter = $("#clearAfter");
  const toggleBtn = $("#themeToggle");

  // Crystal Elements
  const levelSelect = $("#levelSelect");
  const stageSelect = $("#stageSelect");
  const progressBar = $("#progressBar");
  const progressText = $("#progressText");
  const resetBtn = $("#resetBtn");

  let progress = 0;
  let expPerSecond = 0;
  let totalExp = 0;
  let timer = null;

  /** =============================
   *  PH·∫¶N 2 ‚Äî C·∫§U H√åNH D·ªÆ LI·ªÜU CRYSTAL
   ============================== */
  const crystalData = {
    "1-s∆°": { exp: 6, rate: 1 },
    "1-trung": { exp: 8, rate: 1 },
    "1-h·∫≠u": { exp: 18, rate: 1 },
    "2-s∆°": { exp: 38, rate: 1 },
    "2-trung": { exp: 160, rate: 1 },
    "2-h·∫≠u": { exp: 320, rate: 1 },
    "3-s∆°": { exp: 1938, rate: 3 },
    "3-trung": { exp: 5000, rate: 3 },
    "3-h·∫≠u": { exp: 8740, rate: 3 },
    "4-s∆°": { exp: 9100, rate: 5 },
    "4-trung": { exp: 9690, rate: 5 },
    "4-h·∫≠u": { exp: 16150, rate: 5 },
    "5-s∆°": { exp: 17670, rate: 5 },
    "5-trung": { exp: 18544, rate: 5 },
    "5-h·∫≠u": { exp: 19874, rate: 5 },
    "6-s∆°": { exp: 20444, rate: 5 },
    "6-trung": { exp: 21470, rate: 5 },
    "6-h·∫≠u": { exp: 22420, rate: 5 },
    "7-s∆°": { exp: 23674, rate: 5 },
    "7-trung": { exp: 24852, rate: 5 },
    "7-h·∫≠u": { exp: 26106, rate: 5 },
    "8-s∆°": { exp: 27398, rate: 10 },
    "8-trung": { exp: 28766, rate: 10 },
    "8-h·∫≠u": { exp: 60420, rate: 10 },
  };

  
  /** =============================
   *  PH·∫¶N 6.2 ‚Äî C·∫¨P NH·∫¨T TH√îNG TIN CRYSTAL
   ============================== */
  const expCapacityEl = $("#expCapacity");
  const baseSpeedEl = $("#baseSpeed");
  const currentSpeedEl = $("#currentSpeed");
  const timeRequiredEl = $("#timeRequired");
  const timeRemainingEl = $("#timeRemaining");

  const suoiLinh = $("#suoiLinh");
  const thanMat = $("#huyenminhcong");
  const thanMat = $("#thanMat");
  const chienDau = $("#chienDau");
  const keBangTam = $("#keBangTam");

  function formatTime(sec) {
    if (!sec || sec <= 0) return "‚Äî";
    const h = Math.floor(sec / 3600);
    const m = Math.floor((sec % 3600) / 60);
    const s = Math.floor(sec % 60);
    return `${h}h ${m}m ${s}s`;
  }

  function getCurrentSpeed(baseSpeed) {
    let buffPercent = 1;

    // Su·ªëi linh (+10%)
    if (suoiLinh?.checked) buffPercent += 0.1;

    // Th√¢n m·∫≠t (+5% m·ªói ng∆∞·ªùi)
    buffPercent += parseInt(thanMat?.value || 0) * 0.05;

    // Tinh th·∫ßn chi·∫øn ƒë·∫•u
    const chienVal = parseInt(chienDau?.value || 0);
    if (chienVal >= 1501) buffPercent += 0.15;
    else if (chienVal >= 1001) buffPercent += 0.07;
    else if (chienVal >= 501) buffPercent += 0.05;
    else if (chienVal >= 200) buffPercent += 0.03;

    // üìú V·∫≠t ph·∫©m m·ªõi
    if (sachHienNhan?.checked) buffPercent += 0.05;
    if (tamPhapAnhHung?.checked) buffPercent += 0.05;
    if (banDoKhoBau?.checked) buffPercent += 0.15;
    if (thanChuPhepThuat?.checked) buffPercent += 0.30;
    if (kinhDaoGiao?.checked) buffPercent += 0.70;

    // K·∫ø bƒÉng t√¢m (+1 / +2 / +3 EXP/s)
    const keBang = parseInt(keBangTam?.value || 0);
    const extraSpeed = keBang > 0 ? Math.ceil(keBang / 2) : 0;

    return baseSpeed * buffPercent + extraSpeed;
}

  function updateCrystalInfo() {
    if (!levelSelect || !expCapacityEl) return;

    const key = levelSelect.value;
    if (!crystalData[key]) return;

    const expCapacity = crystalData[key].exp;
    const baseSpeed = crystalData[key].rate;
    const currentSpeed = getCurrentSpeed(baseSpeed);

    // T√≠nh th·ªùi gian c·∫ßn thi·∫øt ƒë·ªÉ ƒë·∫ßy
    const timeRequiredSec = currentSpeed > 0 ? expCapacity / currentSpeed : 0;

    // C·∫≠p nh·∫≠t UI
    expCapacityEl.textContent = expCapacity.toLocaleString();
    baseSpeedEl.textContent = baseSpeed.toFixed(2);
    currentSpeedEl.textContent = currentSpeed.toFixed(2);
    timeRequiredEl.textContent = formatTime(timeRequiredSec);

    // N·∫øu progress ƒëang ch·∫°y ‚Üí t√≠nh th·ªùi gian c√≤n l·∫°i
    if (progress > 0 && currentSpeed > 0) {
      const expRemaining = expCapacity * (1 - progress / 100);
      const timeRemainingSec = expRemaining / currentSpeed;
      timeRemainingEl.textContent = formatTime(timeRemainingSec);
    } else {
      timeRemainingEl.textContent = "‚Äî";
    }
  }

  // L·∫Øng nghe thay ƒë·ªïi level & buff
  [levelSelect, suoiLinh, thanMat, chienDau, keBangTam,
  sachHienNhan, tamPhapAnhHung, banDoKhoBau,
  thanChuPhepThuat, kinhDaoGiao].forEach(el => {
    if (el) el.addEventListener("change", () => {
        updateCrystalInfo();
if (progress > 0 && !timer) startProgress();; // ƒë·ªìng b·ªô progress n·∫øu ƒëang ch·∫°y
    });
  });

  // Kh·ªüi t·∫°o ban ƒë·∫ßu
  updateCrystalInfo();
  startProgress();


  
  /** =============================
   *  PH·∫¶N 3 ‚Äî H√ÄM TI·ªÜN √çCH
   ============================== */
  function format(num) {
    return Number.isFinite(num) ? num.toFixed(2) : "0.00";
  }

  function safeEval(expr) {
    if (!/^[0-9+\-*/().\s]+$/.test(expr)) return NaN;
    try {
      return new Function(`return (${expr})`)();
    } catch {
      return NaN;
    }
  }

  /** =============================
   *  PH·∫¶N 4 ‚Äî T√çNH TO√ÅN TR∆Ø·ªöC / SAU LV15
   ============================== */
  function calcBefore() {
    const expr = beforeInput.value.replace(",", ".");
    const val = safeEval(expr);
    const res = (val * 105) / 95;
    beforeOut.textContent = format(res);
  }

  function calcAfter() {
    const expr = afterInput.value.replace(",", ".");
    const val = safeEval(expr);
    const res = (val * 110) / 95;
    afterOut.textContent = format(res);
  }

  if (beforeInput) beforeInput.addEventListener("input", calcBefore);
  if (afterInput) afterInput.addEventListener("input", calcAfter);

  if (clearBefore) {
    clearBefore.addEventListener("click", () => {
      beforeInput.value = "";
      calcBefore();
      beforeInput.focus();
    });
  }

  if (clearAfter) {
    clearAfter.addEventListener("click", () => {
      afterInput.value = "";
      calcAfter();
      afterInput.focus();
    });
  }

  /** =============================
   *  PH·∫¶N 5 ‚Äî DARK / LIGHT THEME ƒê·ªíNG B·ªò
   ============================== */
  function setTheme(theme) {
    root.setAttribute("data-theme", theme);
    localStorage.setItem("theme", theme);
    if (toggleBtn) toggleBtn.textContent = theme === "dark" ? "‚òÄÔ∏è" : "üåô";
  }

  const savedTheme = localStorage.getItem("theme");
  if (savedTheme) {
    setTheme(savedTheme);
  } else {
    const prefersDark = window.matchMedia("(prefers-color-scheme: dark)").matches;
    setTheme(prefersDark ? "dark" : "light");
  }

  if (toggleBtn) {
    toggleBtn.addEventListener("click", () => {
      const current = root.getAttribute("data-theme");
      setTheme(current === "dark" ? "light" : "dark");
    });
  }

  /** =============================
   *  PH·∫¶N 6 ‚Äî PROGRESS BAR CRYSTAL
   ============================== */
  function startProgress() {
    clearInterval(timer);
    if (!levelSelect || !progressBar || !progressText) return;

    const key = levelSelect.value;
    if (!crystalData[key]) return;

    totalExp = crystalData[key].exp;

    // üîπ L·∫•y t·ªëc ƒë·ªô hi·ªán t·∫°i thay v√¨ t·ªëc ƒë·ªô c∆° b·∫£n
    expPerSecond = getCurrentSpeed(crystalData[key].rate);

    progress = 0;
    updateProgressUI();

    timer = setInterval(() => {
      progress += (expPerSecond / totalExp) * 100;

      if (progress >= 100) {
        progress = 100;
        clearInterval(timer);
        updateProgressUI();
        alert("‚ú® Tinh th·ªÉ tu vi ƒë√£ ƒë·∫ßy!");
      } else {
        updateProgressUI();
      }

      // C·∫≠p nh·∫≠t th·ªùi gian c√≤n l·∫°i trong qu√° tr√¨nh ch·∫°y
      updateCrystalInfo();
    }, 1000);
  }


  function updateProgressUI() {
    progressBar.style.width = `${progress}%`;
    progressText.textContent = `${Math.floor(progress)}%`;
  }

if (levelSelect) {
  levelSelect.addEventListener("change", startProgress);
  levelSelect.addEventListener("click", () => {
    // N·∫øu b·∫•m l·∫°i c√πng 1 option th√¨ v·∫´n reset progress
    startProgress();
  });
}

  if (resetBtn) {
    resetBtn.addEventListener("click", startProgress);
  }

  /** =============================
   *  PH·∫¶N 7 ‚Äî B·∫¢NG C√ÇU H·ªéI choicesData ƒê·∫¶Y ƒê·ª¶
   ============================== */
  const choicesData = [
    {
      option1: { text: "ƒÇn qu·∫£", reward: "TƒÉng tu vi", danger: false },
      option2: { text: "U·ªëng n∆∞·ªõc t·ª´ su·ªëi", reward: "TƒÉng tu vi", danger: false },
    },
    {
      option1: { text: "B√≠ m·∫≠t ƒëi·ªÅu tra", reward: "Th∆∞ th√°ch ƒë·∫•u", danger: false },
      option2: { text: "T·∫•n c√¥ng tr·ª±c di·ªán", reward: "Kh√¥ng c√≥ g√¨", danger: true },
    },
    {
      option1: { text: "Chi·∫øn ƒë·∫•u", reward: "Th∆∞ th√°ch ƒë·∫•u", danger: false },
      option2: { text: "Ng∆∞·ª°ng m·ªô", reward: "TƒÉng tu vi", danger: false },
    },
    {
      option1: { text: "C√πng nhau kh√°m ph√°", reward: "Tr·ª´ tu vi", danger: true },
      option2: { text: "T·ª± kh√°m ph√°", reward: "ƒêan v√†ng", danger: false },
    },
    {
      option1: { text: "C·ª©u ch·ªØa", reward: "ƒêan xanh", danger: false },
      option2: { text: "R·ªùi ƒëi", reward: "Tr·ª´ tu vi", danger: true },
    },
    {
      option1: { text: "ƒê√° th·∫ßn", reward: "TƒÉng tu vi", danger: false },
      option2: { text: "ƒê√° hi·∫øm", reward: "TƒÉng tu vi", danger: false },
    },
    {
      option1: { text: "ƒê√°nh nhau v·ªõi ng∆∞·ªùi ƒë√≥", reward: "ƒêan xanh", danger: false },
      option2: { text: "Cho l·ªùi khuy√™n", reward: "TƒÉng tu vi", danger: false },
    },
    {
      option1: { text: "ƒêi ƒë·∫øn h·ªì ƒëen", reward: "Tr·ª´ tu vi", danger: true },
      option2: { text: "ƒêi ƒë·∫øn th√¥n hoa sen", reward: "ƒêan xanh", danger: false },
    },
    {
      option1: { text: "ƒêi sang tr√°i", reward: "Tr·ª´ tu vi", danger: true },
      option2: { text: "ƒêi sang ph·∫£i", reward: "Th∆∞ th√°ch ƒë·∫•u", danger: false },
    },
    {
      option1: { text: "ƒêi tr√™n thuy·ªÅn", reward: "ƒêan xanh", danger: false },
      option2: { text: "Bay tr√™n ki·∫øm", reward: "Th∆∞ th√°ch ƒë·∫•u", danger: false },
    },
    {
      option1: { text: "ƒêi v√†o ban ƒë√™m", reward: "ƒêan v√†ng", danger: false },
      option2: { text: "ƒêi v√†o ban ng√†y", reward: "Kh√¥ng c√≥ g√¨", danger: true },
    },
    {
      option1: { text: "ƒê·ªìng √Ω", reward: "TƒÉng tu vi", danger: false },
      option2: { text: "T·ª´ ch·ªëi", reward: "TƒÉng tu vi", danger: false },
    },
    {
      option1: { text: "D≈©ng c·∫£m d·ª±a v√†o", reward: "TƒÉng tu vi", danger: false },
      option2: { text: "ƒêi n·∫•p", reward: "Kh√¥ng c√≥ g√¨", danger: true },
    },
    {
      option1: { text: "Khai th√°c b·ªÅ m·∫∑t", reward: "TƒÉng tu vi", danger: false },
      option2: { text: "Khai th√°c s√¢u", reward: "Kh√¥ng c√≥ g√¨", danger: true },
    },
    {
      option1: { text: "L∆∞∆°ng thi·ªán", reward: "TƒÉng tu vi", danger: false },
      option2: { text: "L·ªõn m·∫°nh", reward: "ƒêan v√†ng", danger: false },
    },
    {
      option1: { text: "T·∫∑ng thu·ªëc", reward: "ƒêan xanh", danger: false },
      option2: { text: "C·ª©u ch·ªØa", reward: "ƒêan v√†ng", danger: false },
    },
    {
      option1: { text: "Ti√™n th·∫£o", reward: "TƒÉng tu vi", danger: false },
      option2: { text: "ƒêan d∆∞·ª£c", reward: "ƒêan xanh", danger: false },
    },
    {
      option1: { text: "Tr·ª£ gi√∫p chim loan", reward: "ƒêan xanh", danger: false },
      option2: { text: "Tr·ª£ gi√∫p chu·ªôt v√†ng", reward: "ƒêan v√†ng", danger: false },
    },
    {
      option1: { text: "T∆∞·ªõi v∆∞·ªùn thu·ªëc", reward: "TƒÉng tu vi", danger: false },
      option2: { text: "Luy·ªán ƒëan", reward: "ƒêan xanh", danger: false },
    },
  ];

  const choicesBody = document.getElementById("choicesBody");
  if (choicesBody) {
    choicesData.forEach((q) => {
      const row = document.createElement("tr");
      const td1 = document.createElement("td");
      td1.innerHTML = `
        <div class="choice ${q.option1.danger ? "danger" : ""}">
          <span>${q.option1.text}</span>
          <span class="reward">(${q.option1.reward})</span>
        </div>`;
      const td2 = document.createElement("td");
      td2.innerHTML = `
        <div class="choice ${q.option2.danger ? "danger" : ""}">
          <span>${q.option2.text}</span>
          <span class="reward">(${q.option2.reward})</span>
        </div>`;
      row.appendChild(td1);
      row.appendChild(td2);
      choicesBody.appendChild(row);
    });
  }

  /** =============================
   *  PH·∫¶N 8 ‚Äî N√öT ƒêI·ªÄU H∆Ø·ªöNG
   ============================== */
  (function addNavButtons() {
    const main = document.querySelector("main");
    if (!main) return;

    const currentPage = window.location.pathname.split("/").pop();

    const wrapper = document.createElement("div");
    wrapper.className = "exp-link-wrapper";

const buttons = [
  { href: "index.html", label: "üè† Trang ch√≠nh", class: "exp-btn back" },
  { href: "exp.html", label: "üìÑ B·∫£ng EXP", class: "exp-btn" },
  { href: "choices.html", label: "‚ùì C√¢u h·ªèi", class: "exp-btn alt" },
  { href: "crystal.html", label: "üîÆ M√¥ ph·ªèng tinh th·ªÉ", class: "exp-btn" }, // ‚¨Ö N√∫t m·ªõi
];
    buttons.forEach((btnData) => {
      if (btnData.href === currentPage) return;
      const btn = document.createElement("a");
      btn.href = btnData.href;
      btn.textContent = btnData.label;
      btn.className = btnData.class;
      wrapper.appendChild(btn);
    });

    main.appendChild(wrapper);
  })();
})();
