(function () {
  "use strict";

  const $ = (sel) => document.querySelector(sel);

  const beforeInput = $("#beforeInput");
  const afterInput  = $("#afterInput");
  const beforeOut   = $("#beforeResult");
  const afterOut    = $("#afterResult");
  const toggleBtn   = $("#themeToggle");
  const clearBefore = $("#clearBefore");
  const clearAfter  = $("#clearAfter");
  const root = document.documentElement;

  // ===== H√†m ƒë·ªãnh d·∫°ng s·ªë =====
  function format(num) {
    return Number.isFinite(num) ? num.toFixed(2) : "0.00";
  }

  // ====== T√≠nh to√°n ======
  function calcBefore() {
    const val = parseFloat(beforeInput.value.replace(',', '.')) || 0;
    const res = (val * 105) / 95;
    beforeOut.textContent = format(res);
  }

  function calcAfter() {
    const val = parseFloat(afterInput.value.replace(',', '.')) || 0;
    const res = (val * 110) / 95;
    afterOut.textContent = format(res);
  }

  // ====== Ch·ªâ g·∫Øn s·ª± ki·ªán khi ph·∫ßn t·ª≠ t·ªìn t·∫°i ======
  if (beforeInput && beforeOut) {
    beforeInput.addEventListener("input", calcBefore);

    // H·ªó tr·ª£ d√°n s·ªë c√≥ d·∫•u ph·∫©y
    beforeInput.addEventListener("paste", (e) => {
      const text = (e.clipboardData || window.clipboardData).getData("text");
      if (text && /,/.test(text)) {
        setTimeout(() => {
          beforeInput.value = text.replace(',', '.');
          beforeInput.dispatchEvent(new Event("input", { bubbles: true }));
        }, 0);
      }
    });
  }

  if (afterInput && afterOut) {
    afterInput.addEventListener("input", calcAfter);

    afterInput.addEventListener("paste", (e) => {
      const text = (e.clipboardData || window.clipboardData).getData("text");
      if (text && /,/.test(text)) {
        setTimeout(() => {
          afterInput.value = text.replace(',', '.');
          afterInput.dispatchEvent(new Event("input", { bubbles: true }));
        }, 0);
      }
    });
  }

  // ====== N√∫t xo√° nhanh ======
  if (clearBefore && beforeInput) {
    clearBefore.addEventListener("click", () => {
      beforeInput.value = "";
      calcBefore();
      beforeInput.focus();
    });
  }

  if (clearAfter && afterInput) {
    clearAfter.addEventListener("click", () => {
      afterInput.value = "";
      calcAfter();
      afterInput.focus();
    });
  }

  // ====== Dark / Light Theme Toggle ======
  function setTheme(theme) {
    root.setAttribute("data-theme", theme);
    localStorage.setItem("theme", theme);
    if (toggleBtn) toggleBtn.textContent = theme === "dark" ? "‚òÄÔ∏è" : "üåô";

    // Force repaint tr√™n iOS Safari
    document.body.style.visibility = "hidden";
    document.body.offsetHeight;
    document.body.style.visibility = "visible";
  }

  // √Åp d·ª•ng theme khi load
  const savedTheme = localStorage.getItem("theme");
  if (savedTheme) {
    setTheme(savedTheme);
  } else {
    const prefersDark = window.matchMedia("(prefers-color-scheme: dark)").matches;
    setTheme(prefersDark ? "dark" : "light");
  }

  // Ch·ªâ g·∫Øn s·ª± ki·ªán khi n√∫t toggle t·ªìn t·∫°i
  if (toggleBtn) {
    toggleBtn.addEventListener("click", () => {
      const current = root.getAttribute("data-theme");
      const next = current === "dark" ? "light" : "dark";
      setTheme(next);
    });
  }

  // T√≠nh to√°n l·∫°i k·∫øt qu·∫£ khi load (ch·ªâ tr√™n index)
  window.addEventListener("DOMContentLoaded", () => {
    if (beforeInput && beforeOut) calcBefore();
    if (afterInput && afterOut) calcAfter();
  });
})();

// ====== D·ªÆ LI·ªÜU C√ÇU H·ªéI ======
const choicesData = [
  {
    option1: { text: "ƒÇn qu·∫£", reward: "TƒÉng tu vi", danger: false },
    option2: { text: "U·ªëng n∆∞·ªõc t·ª´ su·ªëi", reward: "TƒÉng tu vi", danger: false },
  },
  {
    option1: { text: "B√≠ m·∫≠t ƒëi·ªÅu tra", reward: "Th∆∞ th√°ch ƒë·∫•u", danger: false },
    option2: { text: "T·∫•n c√¥ng tr·ª±c di·ªán", reward: "Kh√¥ng c√≥ g√¨", danger: true },
  },
  {
    option1: { text: "Chi·∫øn ƒë·∫•u", reward: "Th∆∞ th√°ch ƒë·∫•u", danger: false },
    option2: { text: "Ng∆∞·ª°ng m·ªô", reward: "TƒÉng tu vi", danger: false },
  },
  {
    option1: { text: "C√πng nhau kh√°m ph√°", reward: "Tr·ª´ tu vi", danger: true },
    option2: { text: "T·ª± kh√°m ph√°", reward: "ƒêan v√†ng", danger: false },
  },
  {
    option1: { text: "C·ª©u ch·ªØa", reward: "ƒêan xanh", danger: false },
    option2: { text: "R·ªùi ƒëi", reward: "Tr·ª´ tu vi", danger: true },
  },
  {
    option1: { text: "ƒê√° th·∫ßn", reward: "TƒÉng tu vi", danger: false },
    option2: { text: "ƒê√° hi·∫øm", reward: "TƒÉng tu vi", danger: false },
  },
  {
    option1: { text: "ƒê√°nh nhau v·ªõi ng∆∞·ªùi ƒë√≥", reward: "ƒêan xanh", danger: false },
    option2: { text: "Cho l·ªùi khuy√™n", reward: "TƒÉng tu vi", danger: false },
  },
  {
    option1: { text: "ƒêi ƒë·∫øn h·ªì ƒëen", reward: "Tr·ª´ tu vi", danger: true },
    option2: { text: "ƒêi ƒë·∫øn th√¥n hoa sen", reward: "ƒêan xanh", danger: false },
  },
  {
    option1: { text: "ƒêi sang tr√°i", reward: "Tr·ª´ tu vi", danger: true },
    option2: { text: "ƒêi sang ph·∫£i", reward: "Th∆∞ th√°ch ƒë·∫•u", danger: false },
  },
  {
    option1: { text: "ƒêi tr√™n thuy·ªÅn", reward: "ƒêan xanh", danger: false },
    option2: { text: "Bay tr√™n ki·∫øm", reward: "Th∆∞ th√°ch ƒë·∫•u", danger: false },
  },
  {
    option1: { text: "ƒêi v√†o ban ƒë√™m", reward: "ƒêan v√†ng", danger: false },
    option2: { text: "ƒêi v√†o ban ng√†y", reward: "Kh√¥ng c√≥ g√¨", danger: true },
  },
  {
    option1: { text: "ƒê·ªìng √Ω", reward: "TƒÉng tu vi", danger: false },
    option2: { text: "T·ª´ ch·ªëi", reward: "TƒÉng tu vi", danger: false },
  },
  {
    option1: { text: "D≈©ng c·∫£m d·ª±a v√†o", reward: "TƒÉng tu vi", danger: false },
    option2: { text: "ƒêi n·∫•p", reward: "Kh√¥ng c√≥ g√¨", danger: true },
  },
  {
    option1: { text: "Khai th√°c b·ªÅ m·∫∑t", reward: "TƒÉng tu vi", danger: false },
    option2: { text: "Khai th√°c s√¢u", reward: "Kh√¥ng c√≥ g√¨", danger: true },
  },
  {
    option1: { text: "L∆∞∆°ng thi·ªán", reward: "TƒÉng tu vi", danger: false },
    option2: { text: "L·ªõn m·∫°nh", reward: "ƒêan v√†ng", danger: false },
  },
  {
    option1: { text: "T·∫∑ng thu·ªëc", reward: "ƒêan xanh", danger: false },
    option2: { text: "C·ª©u ch·ªØa", reward: "ƒêan v√†ng", danger: false },
  },
  {
    option1: { text: "Ti√™n th·∫£o", reward: "TƒÉng tu vi", danger: false },
    option2: { text: "ƒêan d∆∞·ª£c", reward: "ƒêan xanh", danger: false },
  },
  {
    option1: { text: "Tr·ª£ gi√∫p chim loan", reward: "ƒêan xanh", danger: false },
    option2: { text: "Tr·ª£ gi√∫p chu·ªôt v√†ng", reward: "ƒêan v√†ng", danger: false },
  },
  {
    option1: { text: "T∆∞·ªõi v∆∞·ªùn thu·ªëc", reward: "TƒÉng tu vi", danger: false },
    option2: { text: "Luy·ªán ƒëan", reward: "ƒêan xanh", danger: false },
  },
  // ... ti·∫øp t·ª•c b·ªï sung theo b·∫£ng b·∫°n g·ª≠i
];

// ====== RENDER B·∫¢NG C√ÇU H·ªéI ======
const choicesBody = document.getElementById("choicesBody");

if (choicesBody) {
  choicesData.forEach((q) => {
    const row = document.createElement("tr");

    // L·ª±a ch·ªçn 1
    const td1 = document.createElement("td");
    td1.innerHTML = `
      <div class="choice ${q.option1.danger ? "danger" : ""}">
        <span>${q.option1.text}</span>
        <span class="reward">(${q.option1.reward})</span>
      </div>
    `;

    // L·ª±a ch·ªçn 2
    const td2 = document.createElement("td");
    td2.innerHTML = `
      <div class="choice ${q.option2.danger ? "danger" : ""}">
        <span>${q.option2.text}</span>
        <span class="reward">(${q.option2.reward})</span>
      </div>
    `;

    row.appendChild(td1);
    row.appendChild(td2);
    choicesBody.appendChild(row);
  });
}
